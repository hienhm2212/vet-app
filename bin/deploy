#!/usr/bin/env bash

# VetCare Pro Deployment Script
# This script automates the deployment process for the veterinary clinic application

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to check prerequisites
check_prerequisites() {
    print_status "Checking prerequisites..."
    
    if ! command_exists ruby; then
        print_error "Ruby is not installed"
        exit 1
    fi
    
    if ! command_exists bundle; then
        print_error "Bundler is not installed"
        exit 1
    fi
    
    if ! command_exists rails; then
        print_error "Rails is not installed"
        exit 1
    fi
    
    if ! command_exists git; then
        print_error "Git is not installed"
        exit 1
    fi
    
    print_success "All prerequisites are satisfied"
}

# Function to run tests
run_tests() {
    print_status "Running tests..."
    
    if bundle exec rails test; then
        print_success "All tests passed"
    else
        print_error "Tests failed"
        exit 1
    fi
}

# Function to run security checks
run_security_checks() {
    print_status "Running security checks..."
    
    if bundle exec brakeman --no-progress; then
        print_success "Security checks passed"
    else
        print_warning "Security checks found issues"
    fi
    
    if bundle exec bundle-audit check --update; then
        print_success "Dependency audit passed"
    else
        print_warning "Dependency audit found issues"
    fi
}

# Function to build assets
build_assets() {
    print_status "Building assets..."
    
    if bundle exec rails assets:precompile; then
        print_success "Assets built successfully"
    else
        print_error "Asset build failed"
        exit 1
    fi
}

# Function to deploy with Kamal
deploy_with_kamal() {
    print_status "Deploying with Kamal..."
    
    if command_exists kamal; then
        if kamal deploy; then
            print_success "Deployment completed successfully"
        else
            print_error "Deployment failed"
            exit 1
        fi
    else
        print_warning "Kamal not found, skipping deployment"
    fi
}

# Function to deploy with Docker
deploy_with_docker() {
    print_status "Deploying with Docker..."
    
    if command_exists docker; then
        if docker-compose -f docker-compose.prod.yml up -d --build; then
            print_success "Docker deployment completed successfully"
        else
            print_error "Docker deployment failed"
            exit 1
        fi
    else
        print_warning "Docker not found, skipping deployment"
    fi
}

# Function to show help
show_help() {
    echo "VetCare Pro Deployment Script"
    echo ""
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  -h, --help          Show this help message"
    echo "  -t, --test          Run tests only"
    echo "  -s, --security      Run security checks only"
    echo "  -a, --assets        Build assets only"
    echo "  -k, --kamal         Deploy with Kamal"
    echo "  -d, --docker        Deploy with Docker"
    echo "  --full              Full deployment (test, security, assets, deploy)"
    echo ""
    echo "Examples:"
    echo "  $0 --test           Run tests only"
    echo "  $0 --kamal          Deploy with Kamal"
    echo "  $0 --full           Full deployment"
}

# Main deployment function
main_deployment() {
    print_status "Starting VetCare Pro deployment..."
    
    check_prerequisites
    run_tests
    run_security_checks
    build_assets
    
    # Deploy based on available tools
    if command_exists kamal; then
        deploy_with_kamal
    elif command_exists docker; then
        deploy_with_docker
    else
        print_warning "No deployment method available (Kamal or Docker)"
    fi
    
    print_success "Deployment process completed!"
}

# Parse command line arguments
case "${1:-}" in
    -h|--help)
        show_help
        exit 0
        ;;
    -t|--test)
        check_prerequisites
        run_tests
        exit 0
        ;;
    -s|--security)
        check_prerequisites
        run_security_checks
        exit 0
        ;;
    -a|--assets)
        check_prerequisites
        build_assets
        exit 0
        ;;
    -k|--kamal)
        check_prerequisites
        run_tests
        run_security_checks
        build_assets
        deploy_with_kamal
        exit 0
        ;;
    -d|--docker)
        check_prerequisites
        run_tests
        run_security_checks
        build_assets
        deploy_with_docker
        exit 0
        ;;
    --full)
        main_deployment
        exit 0
        ;;
    "")
        main_deployment
        exit 0
        ;;
    *)
        print_error "Unknown option: $1"
        show_help
        exit 1
        ;;
esac
